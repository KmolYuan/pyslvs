# AppVeyor for Pyslvs-UI
version: '{build}'
image: Visual Studio 2019
platform: x64
clone_depth: 3
environment:
  MSYS_DIR: C:\msys64
  APPVEYOR_CONSOLE_DISABLE_PTY: true
  matrix:
    - PY: 37
      COMPILER: mingw32
    - PY: 38
      COMPILER: mingw32
      DEPLOY: "true"
    - PY: 37
      COMPILER: msvc
    - PY: 38
      COMPILER: msvc
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
      PY: 3.7
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu1604
      PY: 3.8
      DEPLOY: "true"
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      PY: 3.7
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
      PY: 3.8
      DEPLOY: "true"

install:
  # Clone submodules
  - git submodule update --init --recursive
  # Install Python-dev
  - cmd: IF DEFINED PYTHON_DEV choco install -y python --version %PYTHON_DEV%
  # Environment variables
  - cmd: set Path=%MSYS_DIR%\mingw64\bin;%MSYS_DIR%\usr\bin;%Path%
  - cmd: set PYTHON_DIR=C:\Python%PY%-x64
  - cmd: set Path=%PYTHON_DIR%;%PYTHON_DIR%\Scripts;%Path%
  - sh: source ~/venv${PY}/bin/activate
  # Show Python
  - python --version
  - pip --version
  # Set Python compiler to MinGW
  - cmd: platform\set_pycompiler %PYTHON_DIR% %COMPILER%
  # Install modules
  - pip install setuptools -U
  - pip install -r requirements.txt

build_script:
  - python setup.py install

test_script:
  - python setup.py test

after_build:
  # PyPI deployment
  - cmd: IF "%APPVEYOR_REPO_TAG%"=="true"
         IF "%APPVEYOR_REPO_NAME%"=="KmolYuan/pyslvs" (
         python -m pip install twine &&
         python setup.py bdist_wheel &&
         python -m twine upload dist\*.whl --skip-existing
         )
  - sh: if [[ "$APPVEYOR_REPO_TAG" == "true" &&
              "$APPVEYOR_REPO_NAME" == "KmolYuan/pyslvs" ]]; then
        python3 -m pip install twine;
        python3 setup.py bdist_wheel;
        python3 -m twine upload dist/*.whl --skip-existing;
        fi
